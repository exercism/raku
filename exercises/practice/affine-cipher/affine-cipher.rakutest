#!/usr/bin/env raku
use Test;
use JSON::Fast;
use lib $?FILE.IO.dirname;
use AffineCipher;
plan 16;

my @test-cases = from-json($=pod[*-1].contents).List;
for @test-cases -> %case {
    if %case<property> eq 'encode' {
        given %case<expected> {
            when .<error>.so {
                throws-like
                  { encode-affine %case<input> },
                  Exception,
                  %case<description>;
            }

            default {
                is encode-affine(%case<input>), |%case<expected description>;
            }
        }
    }
    elsif %case<property> eq 'decode' {
        given %case<expected> {
            when .<error>.so {
                throws-like
                  { decode-affine %case<input> },
                  Exception,
                  %case<description>;
            }

            default {
                is decode-affine(%case<input>), |%case<expected description>;
            }
        }
    }
}

=head2 Test Cases
=begin code
[
  {
    "description": "encode: encode yes",
    "expected": "xbt",
    "input": {
      "key": {
        "a": 5,
        "b": 7
      },
      "phrase": "yes"
    },
    "property": "encode"
  },
  {
    "description": "encode: encode no",
    "expected": "fu",
    "input": {
      "key": {
        "a": 15,
        "b": 18
      },
      "phrase": "no"
    },
    "property": "encode"
  },
  {
    "description": "encode: encode OMG",
    "expected": "lvz",
    "input": {
      "key": {
        "a": 21,
        "b": 3
      },
      "phrase": "OMG"
    },
    "property": "encode"
  },
  {
    "description": "encode: encode O M G",
    "expected": "hjp",
    "input": {
      "key": {
        "a": 25,
        "b": 47
      },
      "phrase": "O M G"
    },
    "property": "encode"
  },
  {
    "description": "encode: encode mindblowingly",
    "expected": "rzcwa gnxzc dgt",
    "input": {
      "key": {
        "a": 11,
        "b": 15
      },
      "phrase": "mindblowingly"
    },
    "property": "encode"
  },
  {
    "description": "encode: encode numbers",
    "expected": "jqgjc rw123 jqgjc rw",
    "input": {
      "key": {
        "a": 3,
        "b": 4
      },
      "phrase": "Testing,1 2 3, testing."
    },
    "property": "encode"
  },
  {
    "description": "encode: encode deep thought",
    "expected": "iynia fdqfb ifje",
    "input": {
      "key": {
        "a": 5,
        "b": 17
      },
      "phrase": "Truth is fiction."
    },
    "property": "encode"
  },
  {
    "description": "encode: encode all the letters",
    "expected": "swxtj npvyk lruol iejdc blaxk swxmh qzglf",
    "input": {
      "key": {
        "a": 17,
        "b": 33
      },
      "phrase": "The quick brown fox jumps over the lazy dog."
    },
    "property": "encode"
  },
  {
    "description": "encode: encode with a not coprime to m",
    "expected": {
      "error": "a and m must be coprime."
    },
    "input": {
      "key": {
        "a": 6,
        "b": 17
      },
      "phrase": "This is a test."
    },
    "property": "encode"
  },
  {
    "description": "decode: decode exercism",
    "expected": "exercism",
    "input": {
      "key": {
        "a": 3,
        "b": 7
      },
      "phrase": "tytgn fjr"
    },
    "property": "decode"
  },
  {
    "description": "decode: decode a sentence",
    "expected": "anobstacleisoftenasteppingstone",
    "input": {
      "key": {
        "a": 19,
        "b": 16
      },
      "phrase": "qdwju nqcro muwhn odqun oppmd aunwd o"
    },
    "property": "decode"
  },
  {
    "description": "decode: decode numbers",
    "expected": "testing123testing",
    "input": {
      "key": {
        "a": 25,
        "b": 7
      },
      "phrase": "odpoz ub123 odpoz ub"
    },
    "property": "decode"
  },
  {
    "description": "decode: decode all the letters",
    "expected": "thequickbrownfoxjumpsoverthelazydog",
    "input": {
      "key": {
        "a": 17,
        "b": 33
      },
      "phrase": "swxtj npvyk lruol iejdc blaxk swxmh qzglf"
    },
    "property": "decode"
  },
  {
    "description": "decode: decode with no spaces in input",
    "expected": "thequickbrownfoxjumpsoverthelazydog",
    "input": {
      "key": {
        "a": 17,
        "b": 33
      },
      "phrase": "swxtjnpvyklruoliejdcblaxkswxmhqzglf"
    },
    "property": "decode"
  },
  {
    "description": "decode: decode with too many spaces",
    "expected": "jollygreengiant",
    "input": {
      "key": {
        "a": 15,
        "b": 16
      },
      "phrase": "vszzm    cly   yd cg    qdp"
    },
    "property": "decode"
  },
  {
    "description": "decode: decode with a not coprime to m",
    "expected": {
      "error": "a and m must be coprime."
    },
    "input": {
      "key": {
        "a": 13,
        "b": 5
      },
      "phrase": "Test"
    },
    "property": "decode"
  }
]
=end code
