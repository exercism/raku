methods: add roster
tests: |
  my GradeSchool $grade-school;
properties:
  add:
    test: |-
      '$grade-school.=new;' ~ "\n" ~
      sprintf(q:to/END/, ([~] do for @(%case<input><students>) { "\n" ~ '        $grade-school.add( ' ~ ":student({$_[0].raku}), :grade({$_[1].raku})" ~ ' ),' }), %case<expected>.List.raku, %case<description>.raku)
      is-deeply(
          (%s
          ),
          %s,
          %s,
      );
      END

  roster:
    test: |-
      '$grade-school.=new;' ~
      sprintf(q:to/END/, ([~] do for @(%case<input><students>) { "\n" ~ '$grade-school.add( ' ~ ":student({$_[0].raku}), :grade({$_[1].raku})" ~ ' );' }), %case<expected>.List.raku, %case<description>.raku)
      %s
      is-deeply(
          $grade-school.roster,
          %s,
          %s,
      );
      END

  grade:
    test: |-
      '$grade-school.=new;' ~
      sprintf(q:to/END/, ([~] do for @(%case<input><students>) { "\n" ~ '$grade-school.add( ' ~ ":student({$_[0].raku}), :grade({$_[1].raku})" ~ ' );' }), %case<input><desiredGrade>, %case<expected>.List.raku, %case<description>.raku)
      %s
      is-deeply(
          $grade-school.roster( :grade(%s) ),
          %s,
          %s,
      );
      END

unit: class
example: |-
  has %!grades;

  method add ( Str :$student, Int :$grade --> Bool ) {
      if %(%!grades.invert){$student}:exists {
          return False;
      }
      %!grades{$grade}.push($student);
      return True;
  }

  method roster ( Int :$grade --> List() ) {
    with $grade {
        with %!grades{$_} {
            return .sort;
        }
        return ();
    }
    return %!grades.pairs.sort({$^a.key <=> $^b.key}).map(*.value.sort.Slip);
  }

stub: |-
  method add ( :$student, :$grade --> Bool ) {
  }

  method roster ( :$grade ) {
  }
