properties:
  findFewestCoins:
    test: |-
      if %case<expected><error>:exists {
          sprintf(q:to/END/, (%case<input><target>:p, :coins(%case<input><coins><>), %case<description>).map(*.raku));
          dies-ok(
              { fewest-coins %s, %s },
              %s,
          );
          END
      }
      else {
          sprintf(q:to/END/, (%case<input><target>:p, :coins(%case<input><coins><>), %case<expected><>, %case<description>).map(*.raku));
          cmp-ok(
              fewest-coins( %s, %s ),
              &infix:<(==)>,
              %s.Bag,
              %s,
          );
          END
      }

unit: module
example: |-
  sub fewest-coins (:@coins, UInt :$target) is export {
  }

stub: |-
  sub fewest-coins (:@coins, :$target) is export {
  }
