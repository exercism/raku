properties:
  answer:
    test: |-
      if %case<expected><error>:exists {
          sprintf(q:to/END/, (%case<input><question>, %case<description>).map(*.raku));
          dies-ok(
              { answer %s },
              %s,
          );
          END
      }
      else {
          sprintf(q:to/END/, (%case<input><question>, |%case<expected description>).map(*.raku));
          cmp-ok(
              answer(%s),
              "==",
              %s,
              %s,
          );
          END
      }

unit: module
example: |-
  grammar Calculate {
      rule TOP     { What is <problem> \? }
      rule problem { <num> [ <operator> <num> ] * }
      token num    { '-'? <[0..9]>+ }
      token operator {
          || plus
          || minus
          || [ multiplied || divided ] ' by'
      }
  }

  class Calculation {
      method TOP ($/) { make $<problem>.made }

      method num ($/) { make $/.Numeric }

      method operator ($/) {
          given $/ {
              when 'plus'          { make &infix:<+> }
              when 'minus'         { make &infix:<-> }
              when 'multiplied by' { make &infix:<ร> }
              when 'divided by'    { make &infix:<รท> }
          }
      }

      method problem ($/) {
          my @nums = $<num>.map(*.made);
          my $result = @nums.shift;

          for $<operator>.map(*.made) -> &op {
              $result = op $result, @nums.shift;
          }

          make $result;
      }
  }

  sub answer ($question) is export {
      Calculate.parse( $question, :actions(Calculation.new) ).made
        or die 'syntax error';
  }

stub: |-
  sub answer ($question) is export {
  }
