properties:
  equilateral:
    test: |-
      sprintf(q:to/END/, %case<input><sides>.List<>, %case<expected>, %case<description>.raku);
      cmp-ok(
          is-equilateral(%s, %s, %s),
          "==",
          %s,
          %s,
      );
      END
  isosceles:
    test: |-
      sprintf(q:to/END/, %case<input><sides>.List<>, %case<expected>, %case<description>.raku);
      cmp-ok(
          is-isosceles(%s, %s, %s),
          "==",
          %s,
          %s,
      );
      END
  scalene:
    test: |-
      sprintf(q:to/END/, %case<input><sides>.List<>, %case<expected>, %case<description>.raku);
      cmp-ok(
          is-scalene(%s, %s, %s),
          "==",
          %s,
          %s,
      );
      END

unit: module
example: |-
  sub is-triangle ($a, $b, $c) {
    return False if so 0 == all $a, $b, $c;
    return False unless $a + $b >= $c
                     && $b + $c >= $a
                     && $a + $c >= $b;
    return True;
  }

  sub is-equilateral ($a, $b, $c) is export {
    return is-triangle($a, $b, $c) && [==] $a, $b, $c;
  }

  sub is-isosceles ($a, $b, $c) is export {
    return is-triangle($a, $b, $c) && ( is-equilateral($a, $b, $c) || ! is-scalene($a, $b, $c) );
  }

  sub is-scalene ($a, $b, $c) is export {
    return is-triangle($a, $b, $c) && [!=] $a, $b, $c, $a;
   }

stub: |-
  sub is-equilateral ($a, $b, $c) is export {
  }

  sub is-isosceles ($a, $b, $c) is export {
  }

  sub is-scalene ($a, $b, $c) is export {
  }
