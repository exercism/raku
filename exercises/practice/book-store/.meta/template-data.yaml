properties:
  total:
    test: |-
      sprintf(q:to/END/, (%case<input><basket><>.Bag.pairs.sort({$^a.key <=> $^b.key}).List, |%case<expected description>).map(*.raku));
      cmp-ok(
          best-price( %s.Bag ),
          "eqv",
          Rat.new(%s, 100),
          %s,
      );
      END

unit: module
example: |-
  constant @discounts = 1, .95, .9, .8, .75;

  sub best-price (%basket) is export {
      my @groups;

      for %basket.values -> $count {
          for ^$count {
              @groups[$_]++;
          }
      }
      
      while @groups âˆ‹ 5 & 3 {
          @groups[@groups.first(5, :k)]--;
          @groups[@groups.first(3, :k)]++;
      }
      
      return @groups.map({ $^books * 8 * @discounts[$books - 1] }).sum.Rat;
  }

stub: |-
  sub best-price (%basket) is export {
  }
