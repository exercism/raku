#!/usr/bin/env raku
use Test;
use JSON::Fast;
use lib $?FILE.IO.dirname;
use lib 'lib';
use BinarySearch;
plan 11;

our @test-cases = from-json($=pod[*-1].contents).List;
for @test-cases -> %case {
    given %case<expected> {
        when .<error>.so {
            throws-like
              { binary-search array => %case<input><array>, value => %case<input><value> },
              Exception,
              %case<description>;
        }

        default {
            cmp-ok
              binary-search(array => %case<input><array>, value => %case<input><value>),
              '==',
              |%case<expected description>;
        }
    }
}

=head2 Test Cases
=begin code
[
  {
    "description": "finds a value in an array with one element",
    "expected": 0,
    "input": {
      "array": [
        6
      ],
      "value": 6
    },
    "property": "find"
  },
  {
    "description": "finds a value in the middle of an array",
    "expected": 3,
    "input": {
      "array": [
        1,
        3,
        4,
        6,
        8,
        9,
        11
      ],
      "value": 6
    },
    "property": "find"
  },
  {
    "description": "finds a value at the beginning of an array",
    "expected": 0,
    "input": {
      "array": [
        1,
        3,
        4,
        6,
        8,
        9,
        11
      ],
      "value": 1
    },
    "property": "find"
  },
  {
    "description": "finds a value at the end of an array",
    "expected": 6,
    "input": {
      "array": [
        1,
        3,
        4,
        6,
        8,
        9,
        11
      ],
      "value": 11
    },
    "property": "find"
  },
  {
    "description": "finds a value in an array of odd length",
    "expected": 9,
    "input": {
      "array": [
        1,
        3,
        5,
        8,
        13,
        21,
        34,
        55,
        89,
        144,
        233,
        377,
        634
      ],
      "value": 144
    },
    "property": "find"
  },
  {
    "description": "finds a value in an array of even length",
    "expected": 5,
    "input": {
      "array": [
        1,
        3,
        5,
        8,
        13,
        21,
        34,
        55,
        89,
        144,
        233,
        377
      ],
      "value": 21
    },
    "property": "find"
  },
  {
    "description": "identifies that a value is not included in the array",
    "expected": {
      "error": "value not in array"
    },
    "input": {
      "array": [
        1,
        3,
        4,
        6,
        8,
        9,
        11
      ],
      "value": 7
    },
    "property": "find"
  },
  {
    "description": "a value smaller than the array's smallest value is not found",
    "expected": {
      "error": "value not in array"
    },
    "input": {
      "array": [
        1,
        3,
        4,
        6,
        8,
        9,
        11
      ],
      "value": 0
    },
    "property": "find"
  },
  {
    "description": "a value larger than the array's largest value is not found",
    "expected": {
      "error": "value not in array"
    },
    "input": {
      "array": [
        1,
        3,
        4,
        6,
        8,
        9,
        11
      ],
      "value": 13
    },
    "property": "find"
  },
  {
    "description": "nothing is found in an empty array",
    "expected": {
      "error": "value not in array"
    },
    "input": {
      "array": [
      ],
      "value": 1
    },
    "property": "find"
  },
  {
    "description": "nothing is found when the left and right bounds cross",
    "expected": {
      "error": "value not in array"
    },
    "input": {
      "array": [
        1,
        2
      ],
      "value": 0
    },
    "property": "find"
  }
]
=end code
