package: Robot
methods: name reset-name
plan: 8
tests: |-
  srand 1;
  my Robot:D $robot := Robot.new;
  my Str:D @robot-names = $robot.name;
  like @robot-names[0], /^^<[A..Z]> <[0..9]>**2$$/, 'Name matches schema';

  srand 2;
  is $robot.name, @robot-names[0], 'Name is persistent';
  srand 1;
  @robot-names.push(Robot.new.name);
  isnt @robot-names[*-1], @robot-names[0],
    'New Robot cannot claim previous Robot name';

  srand 1;
  $robot.reset-name;
  @robot-names.push($robot.name);
  for 1..2 {
    isnt @robot-names[$_], @robot-names[0],
      "'reset-name' cannot use previous Robot name";
  }

  until @robot-names.elems == 2600 {
    @robot-names.push(Robot.new.name);
  }

  is @robot-names, @robot-names.unique, 'All names are unique';
  subtest 'Randomness', {
    plan 2;
    isnt @robot-names, @robot-names.sort,
      'Names not ordered';
    isnt @robot-names, @robot-names.sort.reverse,
      'Names not reverse ordered';
  }

  throws-like
    {Robot.new},
    Exception,
    message => /'All names used.'/,
    'Throw exception when out of names';

catch_stub: true
unit: class
example: |-
  my $promised-names = start [pick ([X~] ("A".."Z"), |(^10 xx 2)): *];

  subset Name of Str where * ~~ /^<[A..Z]> <[0..9]>**2$/;
  has Name:D $.name = self.reset-name;

  method reset-name {
    await $promised-names;
    given $promised-names.result[$++] {
      when Str {
        return $!name = $_;
      }
    }
    die 'All names used.';
  }

stub: |-
  has Str:D $.name = '';

  method reset-name {!!!}
