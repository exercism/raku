unit: module

properties:
  sublist:
    test: |-
      sprintf(q:to/END/, %case<input><listOne>.List<>.raku, %case<input><listTwo>.List<>.raku, %case<expected>.List, %case<description>);
      cmp-ok(
          compare-lists(%s, %s),
          "eq",
          "%s",
          "%s",
      );
      END

example: |-
  sub compare-lists ( $a, $b ) is export {
    return 'equal'     when $a eqv $b;
    return 'superlist' when $b eqv ()
      || $a.rotor( $b.elems => - $b.elems.pred ).any eqv $b;
    return 'sublist'   when $a eqv ()
      || $b.rotor( $a.elems => - $a.elems.pred ).any eqv $a;
    return 'unequal';
  }

stub: |-
  sub compare-lists ( $a, $b ) is export {
  }
