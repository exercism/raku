#!/usr/bin/env raku
use Test;
use lib $?FILE.IO.dirname;
use LargestSeriesProduct;

cmp-ok( # begin: 7c82f8b7-e347-48ee-8a22-f672323324d4
    largest-product("29", 2),
    &infix:<==>,
    18,
    "finds the largest product if span equals length",
); # end: 7c82f8b7-e347-48ee-8a22-f672323324d4

cmp-ok( # begin: 88523f65-21ba-4458-a76a-b4aaf6e4cb5e
    largest-product("0123456789", 2),
    &infix:<==>,
    72,
    "can find the largest product of 2 with numbers in order",
); # end: 88523f65-21ba-4458-a76a-b4aaf6e4cb5e

cmp-ok( # begin: f1376b48-1157-419d-92c2-1d7e36a70b8a
    largest-product("576802143", 2),
    &infix:<==>,
    48,
    "can find the largest product of 2",
); # end: f1376b48-1157-419d-92c2-1d7e36a70b8a

cmp-ok( # begin: 46356a67-7e02-489e-8fea-321c2fa7b4a4
    largest-product("0123456789", 3),
    &infix:<==>,
    504,
    "can find the largest product of 3 with numbers in order",
); # end: 46356a67-7e02-489e-8fea-321c2fa7b4a4

cmp-ok( # begin: a2dcb54b-2b8f-4993-92dd-5ce56dece64a
    largest-product("1027839564", 3),
    &infix:<==>,
    270,
    "can find the largest product of 3",
); # end: a2dcb54b-2b8f-4993-92dd-5ce56dece64a

cmp-ok( # begin: 673210a3-33cd-4708-940b-c482d7a88f9d
    largest-product("0123456789", 5),
    &infix:<==>,
    15120,
    "can find the largest product of 5 with numbers in order",
); # end: 673210a3-33cd-4708-940b-c482d7a88f9d

cmp-ok( # begin: 02acd5a6-3bbf-46df-8282-8b313a80a7c9
    largest-product("73167176531330624919225119674426574742355349194934", 6),
    &infix:<==>,
    23520,
    "can get the largest product of a big number",
); # end: 02acd5a6-3bbf-46df-8282-8b313a80a7c9

cmp-ok( # begin: 76dcc407-21e9-424c-a98e-609f269622b5
    largest-product("0000", 2),
    &infix:<==>,
    0,
    "reports zero if the only digits are zero",
); # end: 76dcc407-21e9-424c-a98e-609f269622b5

cmp-ok( # begin: 6ef0df9f-52d4-4a5d-b210-f6fae5f20e19
    largest-product("99099", 3),
    &infix:<==>,
    0,
    "reports zero if all spans include zero",
); # end: 6ef0df9f-52d4-4a5d-b210-f6fae5f20e19

dies-ok( # begin: 5d81aaf7-4f67-4125-bf33-11493cc7eab7
    { largest-product("123", 4) },
    "rejects span longer than string length",
); # end: 5d81aaf7-4f67-4125-bf33-11493cc7eab7

cmp-ok( # begin: 06bc8b90-0c51-4c54-ac22-3ec3893a079e
    largest-product("", 0),
    &infix:<==>,
    1,
    "reports 1 for empty string and empty product (0 span)",
); # end: 06bc8b90-0c51-4c54-ac22-3ec3893a079e

cmp-ok( # begin: 3ec0d92e-f2e2-4090-a380-70afee02f4c0
    largest-product("123", 0),
    &infix:<==>,
    1,
    "reports 1 for nonempty string and empty product (0 span)",
); # end: 3ec0d92e-f2e2-4090-a380-70afee02f4c0

dies-ok( # begin: 6d96c691-4374-4404-80ee-2ea8f3613dd4
    { largest-product("", 1) },
    "rejects empty string and nonzero span",
); # end: 6d96c691-4374-4404-80ee-2ea8f3613dd4

dies-ok( # begin: 7a38f2d6-3c35-45f6-8d6f-12e6e32d4d74
    { largest-product("1234a5", 2) },
    "rejects invalid character in digits",
); # end: 7a38f2d6-3c35-45f6-8d6f-12e6e32d4d74

dies-ok( # begin: c859f34a-9bfe-4897-9c2f-6d7f8598e7f0
    { largest-product("12345", -1) },
    "rejects negative span",
); # end: c859f34a-9bfe-4897-9c2f-6d7f8598e7f0

done-testing;
