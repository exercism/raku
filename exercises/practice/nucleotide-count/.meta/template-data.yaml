properties:
  nucleotideCounts:
    test: |-
      if %case<expected><error>:exists {
          sprintf(q:to/END/, (%case<input><strand>, %case<expected><error>, %case<description>).map(*.raku));
          throws-like(
              { nucleotide-count %s },
              Exception,
              message => /:i
                  %s
                  || "type check failed"
              /,
              %s,
          );
          END
      }
      else {
          sprintf(q:to/END/, (%case<input><strand>, %case<expected><>, %case<description>).map(*.raku));
          cmp-ok(
              nucleotide-count(%s),
              "(==)",
              %s.Bag,
              %s,
          );
          END
      }

example: |-
  my role X::NucleotideCount is Exception {}

  my class X::NucleotideCount::InvalidNucleotide does X::NucleotideCount {
      method message {
          'Invalid nucleotide in strand';
      }
  }

  module NucleotideCount {
      multi nucleotide-count (
          Str:D $_ where { .comb âŠ† <A C G T> },
          --> Bag()
      ) is export {
          .comb;
      }

      multi nucleotide-count (
          Str:D $_,
          --> Nil
      ) {
          X::NucleotideCount::InvalidNucleotide.new.throw;
      }
  }

stub: |-
  unit module NucleotideCount;

  sub nucleotide-count ($strand) is export {
  }
