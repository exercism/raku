package: Queen

tests: |
  my Queen %queen;

properties:
  create:
    test: |-
      if %case<expected><error>:exists {
        sprintf(q:to/END/, (%case<input><queen><position><row>, %case<input><queen><position><column>, %case<expected><error>.subst(/positive/, 'on board'), %case<description>).map(*.raku));
        throws-like(
          { Queen.new( :row(%s), :column(%s) ) },
          Exception,
          message => /:i
              %s
              || "type check failed"
          /,
          %s,
        );
        END
      } else {
        sprintf(q:to/END/, (%case<input><queen><position><row>, %case<input><queen><position><column>, %case<description>).map(*.raku));
        lives-ok(
            { Queen.new( :row(%s), :column(%s) ) },
            %s,
        );
        END
      }

  canAttack:
    test: |-
      sprintf(q:to/END/, (%case<input><white_queen><position><row>, %case<input><white_queen><position><column>, %case<input><black_queen><position><row>, %case<input><black_queen><position><column>).map(*.raku), %case<expected>, %case<description>.map(*.raku));
      %%queen<white>.=new( :row(%s), :column(%s) );
      %%queen<black>.=new( :row(%s), :column(%s) );
      cmp-ok(
          %%queen<white>.can-attack( %%queen<black> ),
          &infix:<eqv>,
          %s,
          %s,
      );
      END

unit: class
example: |-
  subset Position of Int where ^8;
  has Position ( $.row, $.column );

  method can-attack ( Queen:D \other --> Bool:D ) {
      return
           self.row    == other.row
        || self.column == other.column
        || abs(self.row - other.row) == abs(self.column - other.column);
  }

stub: |-
  has ($.row, $.column);

  method can-attack (Queen \other) {
  }
