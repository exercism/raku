#!/usr/bin/env raku
use Test;
use lib $?FILE.IO.dirname;
use Queen;

my Queen %queen;

lives-ok( # begin: 3ac4f735-d36c-44c4-a3e2-316f79704203
    { Queen.new( :row(2), :column(2) ) },
    "Test creation of Queens with valid and invalid positions: queen with a valid position",
); # end: 3ac4f735-d36c-44c4-a3e2-316f79704203

throws-like( # begin: 4e812d5d-b974-4e38-9a6b-8e0492bfa7be
  { Queen.new( :row(-2), :column(2) ) },
  Exception,
  message => /:i
      "row not on board"
      || "type check failed"
  /,
  "Test creation of Queens with valid and invalid positions: queen must have positive row",
); # end: 4e812d5d-b974-4e38-9a6b-8e0492bfa7be

throws-like( # begin: f07b7536-b66b-4f08-beb9-4d70d891d5c8
  { Queen.new( :row(8), :column(4) ) },
  Exception,
  message => /:i
      "row not on board"
      || "type check failed"
  /,
  "Test creation of Queens with valid and invalid positions: queen must have row on board",
); # end: f07b7536-b66b-4f08-beb9-4d70d891d5c8

throws-like( # begin: 15a10794-36d9-4907-ae6b-e5a0d4c54ebe
  { Queen.new( :row(2), :column(-2) ) },
  Exception,
  message => /:i
      "column not on board"
      || "type check failed"
  /,
  "Test creation of Queens with valid and invalid positions: queen must have positive column",
); # end: 15a10794-36d9-4907-ae6b-e5a0d4c54ebe

throws-like( # begin: 6907762d-0e8a-4c38-87fb-12f2f65f0ce4
  { Queen.new( :row(4), :column(8) ) },
  Exception,
  message => /:i
      "column not on board"
      || "type check failed"
  /,
  "Test creation of Queens with valid and invalid positions: queen must have column on board",
); # end: 6907762d-0e8a-4c38-87fb-12f2f65f0ce4

%queen<white>.=new( :row(2), :column(4) ); # begin: 33ae4113-d237-42ee-bac1-e1e699c0c007
%queen<black>.=new( :row(6), :column(6) );
cmp-ok(
    %queen<white>.can-attack( %queen<black> ),
    &infix:<eqv>,
    False,
    "Test the ability of one queen to attack another: cannot attack",
); # end: 33ae4113-d237-42ee-bac1-e1e699c0c007

%queen<white>.=new( :row(2), :column(4) ); # begin: eaa65540-ea7c-4152-8c21-003c7a68c914
%queen<black>.=new( :row(2), :column(6) );
cmp-ok(
    %queen<white>.can-attack( %queen<black> ),
    &infix:<eqv>,
    True,
    "Test the ability of one queen to attack another: can attack on same row",
); # end: eaa65540-ea7c-4152-8c21-003c7a68c914

%queen<white>.=new( :row(4), :column(5) ); # begin: bae6f609-2c0e-4154-af71-af82b7c31cea
%queen<black>.=new( :row(2), :column(5) );
cmp-ok(
    %queen<white>.can-attack( %queen<black> ),
    &infix:<eqv>,
    True,
    "Test the ability of one queen to attack another: can attack on same column",
); # end: bae6f609-2c0e-4154-af71-af82b7c31cea

%queen<white>.=new( :row(2), :column(2) ); # begin: 0e1b4139-b90d-4562-bd58-dfa04f1746c7
%queen<black>.=new( :row(0), :column(4) );
cmp-ok(
    %queen<white>.can-attack( %queen<black> ),
    &infix:<eqv>,
    True,
    "Test the ability of one queen to attack another: can attack on first diagonal",
); # end: 0e1b4139-b90d-4562-bd58-dfa04f1746c7

%queen<white>.=new( :row(2), :column(2) ); # begin: ff9b7ed4-e4b6-401b-8d16-bc894d6d3dcd
%queen<black>.=new( :row(3), :column(1) );
cmp-ok(
    %queen<white>.can-attack( %queen<black> ),
    &infix:<eqv>,
    True,
    "Test the ability of one queen to attack another: can attack on second diagonal",
); # end: ff9b7ed4-e4b6-401b-8d16-bc894d6d3dcd

%queen<white>.=new( :row(2), :column(2) ); # begin: 0a71e605-6e28-4cc2-aa47-d20a2e71037a
%queen<black>.=new( :row(1), :column(1) );
cmp-ok(
    %queen<white>.can-attack( %queen<black> ),
    &infix:<eqv>,
    True,
    "Test the ability of one queen to attack another: can attack on third diagonal",
); # end: 0a71e605-6e28-4cc2-aa47-d20a2e71037a

%queen<white>.=new( :row(1), :column(7) ); # begin: 0790b588-ae73-4f1f-a968-dd0b34f45f86
%queen<black>.=new( :row(0), :column(6) );
cmp-ok(
    %queen<white>.can-attack( %queen<black> ),
    &infix:<eqv>,
    True,
    "Test the ability of one queen to attack another: can attack on fourth diagonal",
); # end: 0790b588-ae73-4f1f-a968-dd0b34f45f86

%queen<white>.=new( :row(4), :column(1) ); # begin: 543f8fd4-2597-4aad-8d77-cbdab63619f8
%queen<black>.=new( :row(2), :column(5) );
cmp-ok(
    %queen<white>.can-attack( %queen<black> ),
    &infix:<eqv>,
    False,
    "Test the ability of one queen to attack another: cannot attack if falling diagonals are only the same when reflected across the longest falling diagonal",
); # end: 543f8fd4-2597-4aad-8d77-cbdab63619f8

done-testing;
