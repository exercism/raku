properties:
  allergicTo:
    test: |-
      sprintf(q:to/END/, |(%case<input><item score>:p).map(*.raku), %case<expected>, %case<description>.raku);
      is-deeply(
          allergic-to( %s, %s ),
          %s,
          %s,
      );
      END
  list:
    test: |-
      sprintf(q:to/END/, %case<input><score>, (if %case<expected> { "<%case<expected>>" } else { 'set()' }), %case<description>.raku);
      cmp-ok(
          list-allergies(%s),
          &infix:<(==)>,
          %s,
          %s,
      );
      END

unit: module
example: |-
  constant %allergens = <
        eggs
        peanuts
        shellfish
        strawberries
        tomatoes
        chocolate
        pollen
        cats
      > Z=> ( 1, 2, 4 … ∞ );

  sub allergic-to(
    Str:D  :$item where * ∈ %allergens.keys,
    UInt:D :$score,
    --> Bool
  ) is export {
    so %allergens{$item} +& $score;
  }

  sub list-allergies( UInt:D $score ) is export {
    %allergens.keys.grep( { allergic-to :$score, :$^item } );
  }

stub: |-
  constant %allergens = (
      eggs         => 0b1,
      peanuts      => 0b10,
      shellfish    => 0b100,
      strawberries => 0b1000,
      tomatoes     => 0b10000,
      chocolate    => 0b100000,
      pollen       => 0b1000000,
      cats         => 0b10000000,
  );

  sub allergic-to( :$item, :$score ) is export {
  }

  sub list-allergies($score) is export {
  }
