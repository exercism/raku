properties:
  allergicTo:
    test: |-
      sprintf(q:to/END/, %case<input><item>.tc, %case<input><score>.base(2), %case<expected>, %case<description>.raku);
      cmp-ok(
          allergic-to(
              :item(%s),
              :score(0b%s),
          ),
          "eqv",
          %s,
          %s,
      );
      END
  list:
    test: |-
      sprintf(q:to/END/, %case<input><score>.base(2), %case<expected>.map(*.tc).join(', '), %case<description>.raku);
      cmp-ok(
          list-allergies(0b%s),
          "(==)",
          set(%s),
          %s,
      );
      END

unit: module
example: |-
  enum Allergen is export <
      Eggs
      Peanuts
      Shellfish
      Strawberries
      Tomatoes
      Chocolate
      Pollen
      Cats
  >;

  sub allergic-to(
      Allergen(UInt) :$item,
      UInt:D :$score,
      --> Bool
  ) is export {
      so (2 ** $item) +& $score;
  }

  sub list-allergies( UInt:D $score --> Set() ) is export {
      Allergen.values.map( { allergic-to(:$score, :$^item) ?? Allergen($item) !! Empty } );
  }

stub: |-
  enum Allergen is export <
      Eggs
      Peanuts
      Shellfish
      Strawberries
      Tomatoes
      Chocolate
      Pollen
      Cats
  >;

  sub allergic-to( :$item, :$score ) is export {
  }

  sub list-allergies($score) is export {
  }
