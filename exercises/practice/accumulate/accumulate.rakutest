#!/usr/bin/env raku
use Test;
use lib $?FILE.IO.dirname;
use Accumulate;

cmp-ok( # begin: 64d97c14-36dd-44a8-9621-2cecebd6ed23
    accumulate(
        (),
        -> $x { $x * $x },
    ),
    "eqv",
    (),
    "accumulate empty",
); # end: 64d97c14-36dd-44a8-9621-2cecebd6ed23

cmp-ok( # begin: 00008ed2-4651-4929-8c08-8b4dbd70872e
    accumulate(
        (1, 2, 3),
        -> $x { $x * $x },
    ),
    "eqv",
    (1, 4, 9),
    "accumulate squares",
); # end: 00008ed2-4651-4929-8c08-8b4dbd70872e

cmp-ok( # begin: 551016da-4396-4cae-b0ec-4c3a1a264125
    accumulate(
        ("Hello", "world"),
        &uc,
    ),
    "eqv",
    ("HELLO", "WORLD"),
    "accumulate upcases",
); # end: 551016da-4396-4cae-b0ec-4c3a1a264125

cmp-ok( # begin: cdf95597-b6ec-4eac-a838-3480d13d0d05
    accumulate(
        ("the", "quick", "brown", "fox", "etc"),
        &flip,
    ),
    "eqv",
    ("eht", "kciuq", "nworb", "xof", "cte"),
    "accumulate reversed strings",
); # end: cdf95597-b6ec-4eac-a838-3480d13d0d05

cmp-ok( # begin: 0b357334-4cad-49e1-a741-425202edfc7c
    accumulate(
        ("a", "b", "c"),
        -> $x { accumulate 1..3, -> $y { $x ~ $y } },
    ),
    "eqv",
    (("a1", "a2", "a3"), ("b1", "b2", "b3"), ("c1", "c2", "c3")),
    "accumulate recursively",
); # end: 0b357334-4cad-49e1-a741-425202edfc7c

done-testing;
