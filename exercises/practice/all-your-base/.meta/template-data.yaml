properties:
  rebase:
    test: |-
      if %case<expected><error>:exists {
          sprintf(q:to/END/, (|(<from to> Z=> %case<input><inputBase outputBase>), %case<input><digits>.List<>, %case<description>).map(*.raku));
          dies-ok(
              { convert-base bases => { %s, %s }, digits => %s },
              %s,
          );
          END
      }
      else {
          sprintf(q:to/END/, (|(<from to> Z=> %case<input><inputBase outputBase>), %case<input><digits>.List<>, %case<expected>.List<>, %case<description>).map(*.raku));
          cmp-ok(
              convert-base( bases => { %s, %s }, digits => %s ),
              "eqv",
              %s,
              %s,
          );
          END
      }

unit: module
example: |-
  sub convert-base (
    :%bases!  where { all(.keys ~~ <from to>.Set, .values.all > 1) },
    :@digits! where { %bases<from> > .all ~~ UInt:D },
    --> List()
  ) is export {
    from-decimal %bases<to>, to-decimal(%bases<from>, @digits);
  }

  sub to-decimal ($input-base, @input-digits) {
    my $elems = @input-digits.elems;
    $_ == 0 ?? $elems-- !! last for @input-digits;
    (loop (my $i = 0; $i < $elems; $i++) {
      @input-digits.reverse[$i] * $input-base ** $i;
    }).sum;
  }

  sub from-decimal ($output-base, $num is copy) {
    my UInt:D @output-digits;
    while $num >= $output-base {
      unshift @output-digits, $num % $output-base;
      $num div= $output-base;
    }
    @output-digits.unshift($num).List;
  }

stub: |-
  constant @errors = (
    'input base must be >= 2',
    'output base must be >= 2',
    'all digits must satisfy 0 <= d < input base',
  );

  sub convert-base ( :%bases!, :@digits! ) is export {
  }
