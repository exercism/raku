#!/usr/bin/env raku
use Test;
use lib $?FILE.IO.dirname;
use AllYourBase;

cmp-ok( # begin: 5ce422f9-7a4b-4f44-ad29-49c67cb32d2c
    convert-base( bases => { :from(2), :to(10) }, digits => (1,) ),
    "eqv",
    (1,),
    "single bit one to decimal",
); # end: 5ce422f9-7a4b-4f44-ad29-49c67cb32d2c

cmp-ok( # begin: 0cc3fea8-bb79-46ac-a2ab-5a2c93051033
    convert-base( bases => { :from(2), :to(10) }, digits => (1, 0, 1) ),
    "eqv",
    (5,),
    "binary to single decimal",
); # end: 0cc3fea8-bb79-46ac-a2ab-5a2c93051033

cmp-ok( # begin: f12db0f9-0d3d-42c2-b3ba-e38cb375a2b8
    convert-base( bases => { :from(10), :to(2) }, digits => (5,) ),
    "eqv",
    (1, 0, 1),
    "single decimal to binary",
); # end: f12db0f9-0d3d-42c2-b3ba-e38cb375a2b8

cmp-ok( # begin: 2c45cf54-6da3-4748-9733-5a3c765d925b
    convert-base( bases => { :from(2), :to(10) }, digits => (1, 0, 1, 0, 1, 0) ),
    "eqv",
    (4, 2),
    "binary to multiple decimal",
); # end: 2c45cf54-6da3-4748-9733-5a3c765d925b

cmp-ok( # begin: 65ddb8b4-8899-4fcc-8618-181b2cf0002d
    convert-base( bases => { :from(10), :to(2) }, digits => (4, 2) ),
    "eqv",
    (1, 0, 1, 0, 1, 0),
    "decimal to binary",
); # end: 65ddb8b4-8899-4fcc-8618-181b2cf0002d

cmp-ok( # begin: 8d418419-02a7-4824-8b7a-352d33c6987e
    convert-base( bases => { :from(3), :to(16) }, digits => (1, 1, 2, 0) ),
    "eqv",
    (2, 10),
    "trinary to hexadecimal",
); # end: 8d418419-02a7-4824-8b7a-352d33c6987e

cmp-ok( # begin: d3901c80-8190-41b9-bd86-38d988efa956
    convert-base( bases => { :from(16), :to(3) }, digits => (2, 10) ),
    "eqv",
    (1, 1, 2, 0),
    "hexadecimal to trinary",
); # end: d3901c80-8190-41b9-bd86-38d988efa956

cmp-ok( # begin: 5d42f85e-21ad-41bd-b9be-a3e8e4258bbf
    convert-base( bases => { :from(97), :to(73) }, digits => (3, 46, 60) ),
    "eqv",
    (6, 10, 45),
    "15-bit integer",
); # end: 5d42f85e-21ad-41bd-b9be-a3e8e4258bbf

cmp-ok( # begin: d68788f7-66dd-43f8-a543-f15b6d233f83
    convert-base( bases => { :from(2), :to(10) }, digits => () ),
    "eqv",
    (0,),
    "empty list",
); # end: d68788f7-66dd-43f8-a543-f15b6d233f83

cmp-ok( # begin: 5e27e8da-5862-4c5f-b2a9-26c0382b6be7
    convert-base( bases => { :from(10), :to(2) }, digits => (0,) ),
    "eqv",
    (0,),
    "single zero",
); # end: 5e27e8da-5862-4c5f-b2a9-26c0382b6be7

cmp-ok( # begin: 2e1c2573-77e4-4b9c-8517-6c56c5bcfdf2
    convert-base( bases => { :from(10), :to(2) }, digits => (0, 0, 0) ),
    "eqv",
    (0,),
    "multiple zeros",
); # end: 2e1c2573-77e4-4b9c-8517-6c56c5bcfdf2

cmp-ok( # begin: 3530cd9f-8d6d-43f5-bc6e-b30b1db9629b
    convert-base( bases => { :from(7), :to(10) }, digits => (0, 6, 0) ),
    "eqv",
    (4, 2),
    "leading zeros",
); # end: 3530cd9f-8d6d-43f5-bc6e-b30b1db9629b

dies-ok( # begin: a6b476a1-1901-4f2a-92c4-4d91917ae023
    { convert-base bases => { :from(1), :to(10) }, digits => (0,) },
    "input base is one",
); # end: a6b476a1-1901-4f2a-92c4-4d91917ae023

dies-ok( # begin: e21a693a-7a69-450b-b393-27415c26a016
    { convert-base bases => { :from(0), :to(10) }, digits => () },
    "input base is zero",
); # end: e21a693a-7a69-450b-b393-27415c26a016

dies-ok( # begin: 54a23be5-d99e-41cc-88e0-a650ffe5fcc2
    { convert-base bases => { :from(-2), :to(10) }, digits => (1,) },
    "input base is negative",
); # end: 54a23be5-d99e-41cc-88e0-a650ffe5fcc2

dies-ok( # begin: 9eccf60c-dcc9-407b-95d8-c37b8be56bb6
    { convert-base bases => { :from(2), :to(10) }, digits => (1, -1, 1, 0, 1, 0) },
    "negative digit",
); # end: 9eccf60c-dcc9-407b-95d8-c37b8be56bb6

dies-ok( # begin: 232fa4a5-e761-4939-ba0c-ed046cd0676a
    { convert-base bases => { :from(2), :to(10) }, digits => (1, 2, 1, 0, 1, 0) },
    "invalid positive digit",
); # end: 232fa4a5-e761-4939-ba0c-ed046cd0676a

dies-ok( # begin: 14238f95-45da-41dc-95ce-18f860b30ad3
    { convert-base bases => { :from(2), :to(1) }, digits => (1, 0, 1, 0, 1, 0) },
    "output base is one",
); # end: 14238f95-45da-41dc-95ce-18f860b30ad3

dies-ok( # begin: 73dac367-da5c-4a37-95fe-c87fad0a4047
    { convert-base bases => { :from(10), :to(0) }, digits => (7,) },
    "output base is zero",
); # end: 73dac367-da5c-4a37-95fe-c87fad0a4047

dies-ok( # begin: 13f81f42-ff53-4e24-89d9-37603a48ebd9
    { convert-base bases => { :from(2), :to(-7) }, digits => (1,) },
    "output base is negative",
); # end: 13f81f42-ff53-4e24-89d9-37603a48ebd9

dies-ok( # begin: 0e6c895d-8a5d-4868-a345-309d094cfe8d
    { convert-base bases => { :from(-2), :to(-7) }, digits => (1,) },
    "both bases are negative",
); # end: 0e6c895d-8a5d-4868-a345-309d094cfe8d

done-testing;
