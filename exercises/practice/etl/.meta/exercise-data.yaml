package: ETL
tests: |
  =head2 Notes
  =begin para
  The test expects your returned C<Hash> to have
  L<type constraints|https://docs.raku.org/language/hashmap#Constraint_value_types>.
  Defined C<Str>s for the values, and defined C<Int>s for the keys.
  =end para

properties:
  transform:
    test: |-
      sprintf(q:to/END/, (%case<input><legacy>.pairs.sort({$^a.key <=> $^b.key}).map({.key.Int => .value.List<>}).List, %case<expected>.pairs.sort({$^a.key cmp $^b.key}).List, %case<description>).map(*.raku));
      cmp-ok(
          transform( my List %%{Int:D} = %s ),
          "eqv",
          ( my Int:D %%{Str:D} = %s ),
          %s,
      );
      END

unit: module
example: |-
  sub transform ( %input --> Hash[ Int:D, Str:D ] ) is export {
      Hash[ Int:D, Str:D ].new( %input.invert.map: { (.key.lc, .value).Slip } );
  }
stub: |-
  sub transform (%input) is export {
  }
