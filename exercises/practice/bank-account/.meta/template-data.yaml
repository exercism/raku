properties:
  bankAccount:
    test: |-
      my &gen-op-string = {
          if .<operation> eq 'concurrent' {
              sprintf(q:to/END/, .<operations>.map(&gen-op-string).join("\n        "), .<number>).trim-trailing;
                          await Promise.allof(
                              start {
                      %s
                              } xx %s
                          );
              END
          }
          else {
              '            $account.' ~ .<operation> ~ ( .<amount>:exists ?? "({.<amount>})" !! '' ) ~ ';'
          }
      };

      my $final-op = %case<input><operations>[*-1];
      my $lives = %case<input><operations>[0..*-2].map(&gen-op-string).join("\n");
      if $lives {
          $lives = "\n    lives-ok(\n        \{\n" ~ $lives ~ "\n        },\n        'operations',\n    );";
      }

      if 'concurrent' ∈ %case<scenarios> {
          sprintf(q:to/END/, %case<description>.raku, $lives, %case<expected>);
          subtest %s => {
              my BankAccount $account.=new;%s
              cmp-ok(
                  $account.balance,
                  &infix:<eqv>,
                  %s,
                  'balance',
              );
          }
          END
      }
      elsif %case<expected><error>:exists {
          my $error = do given %case<expected><error> {
              when / 'not open' $/          {'X::BankAccount::Closed'}
              when / 'already open' $/      {'X::BankAccount::AlreadyOpen'}
              when / 'greater than 0' $/    {'X::BankAccount::AmountNotPositive'}
              when / 'less than balance' $/ {'X::BankAccount::NoOverdraft'}
          };

          sprintf(q:to/END/, %case<description>.raku, $lives, $final-op<operation>, ($final-op<amount>:exists ?? "({$final-op<amount>})" !! ''), $error, %case<expected><error>.raku);
          subtest %s => {
              my BankAccount $account.=new;%s
              throws-like(
                  { $account.%s%s },
                  %s,
                  :message(/^ %s $/),
                  'error',
              );
          }
          END
      }
      else {
          sprintf(q:to/END/, %case<description>.raku, $lives, $final-op<operation>, %case<expected>);
          subtest %s => {
              my BankAccount $account.=new;%s
              cmp-ok(
                  $account.%s,
                  &infix:<eqv>,
                  %s,
                  'balance',
              );
          }
          END
      }

unit: false
example: |-
  my class X::BankAccount::Closed is Exception {
      method message {'account not open'}
  }

  my class X::BankAccount::AlreadyOpen is Exception {
      method message {'account already open'}
  }

  my class X::BankAccount::AmountNotPositive is Exception {
      method message {'amount must be greater than 0'}
  }

  my class X::BankAccount::NoOverdraft is Exception {
      method message {'amount must be less than balance'}
  }

  class BankAccount {
      has atomicint $!balance;
      has Bool:D    $!is-open = False;

      method balance {
          X::BankAccount::Closed.new.throw unless $!is-open;
          return $!balance;
      }

      method open {
          X::BankAccount::AlreadyOpen.new.throw if $!is-open;
          $!is-open.=succ;
          return self;
      }

      method close {
          self!change-balance(-$.balance);
          $!is-open.=pred;
          return self;
      }

      method withdraw (Int:D $amount) {
          X::BankAccount::AmountNotPositive.new.throw if $amount < 0;
          return self!change-balance(-$amount);
      }

      method deposit (Int:D $amount) {
          X::BankAccount::AmountNotPositive.new.throw if $amount < 0;
          return self!change-balance($amount);
      }

      method !change-balance ($amount) {
          X::BankAccount::Closed.new.throw unless $!is-open;
          X::BankAccount::NoOverdraft.new.throw if $amount < 0 && $amount.abs > $.balance;
          $!balance ⚛+= $amount;
          return self;
      }
  }


stub: |-
  my class X::BankAccount::Closed is Exception {
      method message {'account not open'}
  }

  my class X::BankAccount::AlreadyOpen is Exception {
      method message {'account already open'}
  }

  my class X::BankAccount::AmountNotPositive is Exception {
      method message {'amount must be greater than 0'}
  }

  my class X::BankAccount::NoOverdraft is Exception {
      method message {'amount must be less than balance'}
  }

  class BankAccount {
      has $.balance;

      method open {
      }

      method close {
      }

      method withdraw ($amount) {
      }

      method deposit ($amount) {
      }
  }
