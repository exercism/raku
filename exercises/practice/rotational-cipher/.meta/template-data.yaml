unit: module

properties:
  rotate:
    test: |-
      sprintf(q:to/END/, %case<input><text>.Str, %case<input><shiftKey>.Int, %case<expected>.Str, %case<description>.raku);
      subtest "%1$s" => {
        cmp-ok(
            caesar-cipher("%1$s", %2$s),
            "eq",
            "%3$s",
            %4$s,
        );
        if %2$s == 13 {
          cmp-ok(
            caesar-cipher(caesar-cipher("%1$s", %2$s),13),
            "eq",
            "%1$s",
            %4$s,
          );
        }
      }
      END

example: |-
  sub caesar-cipher ( Str $message, Int $shift-key --> Str ) is export {
    $message.trans( 'A'..'Z' => rotate ( 'A'..'Z' ).Slip, $shift-key )
            .trans: 'a'..'z' => rotate ( 'a'..'z' ).Slip, $shift-key;
  }

stub: |-
  sub caesar-cipher ( Str $message, Int $shift-key --> Str ) is export {
  }
