properties:
  encode:
    test: |-
      sprintf(q:to/END/, (%case<input><phrase>, |%case<expected description>).map(*.raku));
      cmp-ok(
          encode(%s),
          "eq",
          %s,
          %s,
      );
      END
  decode:
    test: |-
      sprintf(q:to/END/, (%case<input><phrase>, |%case<expected description>).map(*.raku));
      cmp-ok(
          decode(%s),
          "eq",
          %s,
          %s,
      );
      END

unit: module
example: |-
  sub encode($input) is export {
    decode( $input.lc.trans( ['a'..'z', 0..9] => '', :complement ) )
      .comb(5).join(' ');
  }

  sub decode (Str $input) is export {
    $input.lc.subst( /\W/, '', :g )
      .trans( [ 'a'..'z' ] =>  ['a'..'z'].reverse );
  }
stub: |-
  sub encode ($phrase) is export {
  }

  sub decode ($phrase) is export {
  }
