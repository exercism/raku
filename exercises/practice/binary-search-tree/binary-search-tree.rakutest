#!/usr/bin/env raku
use Test;
use lib $?FILE.IO.dirname;
use BinarySearchTree;

my BinarySearchTree $bst;

for (2,) -> $data { # begin: 9e0c06ef-aeca-4202-b8e4-97f1ed057d56
    once {
        $bst.=new.root.=new(:$data);
        next;
    }
    $bst.add($data);
}
cmp-ok(
    $bst.sort,
    "eqv",
    (2,),
    "can sort data: can sort single number",
); # end: 9e0c06ef-aeca-4202-b8e4-97f1ed057d56

for (2, 1) -> $data { # begin: 425e6d07-fceb-4681-a4f4-e46920e380bb
    once {
        $bst.=new.root.=new(:$data);
        next;
    }
    $bst.add($data);
}
cmp-ok(
    $bst.sort,
    "eqv",
    (1, 2),
    "can sort data: can sort if second number is smaller than first",
); # end: 425e6d07-fceb-4681-a4f4-e46920e380bb

for (2, 2) -> $data { # begin: bd7532cc-6988-4259-bac8-1d50140079ab
    once {
        $bst.=new.root.=new(:$data);
        next;
    }
    $bst.add($data);
}
cmp-ok(
    $bst.sort,
    "eqv",
    (2, 2),
    "can sort data: can sort if second number is same as first",
); # end: bd7532cc-6988-4259-bac8-1d50140079ab

for (2, 3) -> $data { # begin: b6d1b3a5-9d79-44fd-9013-c83ca92ddd36
    once {
        $bst.=new.root.=new(:$data);
        next;
    }
    $bst.add($data);
}
cmp-ok(
    $bst.sort,
    "eqv",
    (2, 3),
    "can sort data: can sort if second number is greater than first",
); # end: b6d1b3a5-9d79-44fd-9013-c83ca92ddd36

for (2, 1, 3, 6, 7, 5) -> $data { # begin: d00ec9bd-1288-4171-b968-d44d0808c1c8
    once {
        $bst.=new.root.=new(:$data);
        next;
    }
    $bst.add($data);
}
cmp-ok(
    $bst.sort,
    "eqv",
    (1, 2, 3, 5, 6, 7),
    "can sort data: can sort complex tree",
); # end: d00ec9bd-1288-4171-b968-d44d0808c1c8

done-testing;
