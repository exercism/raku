#!/usr/bin/env raku
use Test;
use lib $?FILE.IO.dirname;
use BinarySearchTree;

is-deeply(
    create-binary-tree( ["4"] ),
    {:data("4"), :left(Any), :right(Any)},
    "data is retained",
);

is-deeply(
    create-binary-tree( ["4", "2"] ),
    {:data("4"), :left({:data("2"), :left(Any), :right(Any)}), :right(Any)},
    "insert data at proper node: smaller number at left node",
);

is-deeply(
    create-binary-tree( ["4", "4"] ),
    {:data("4"), :left({:data("4"), :left(Any), :right(Any)}), :right(Any)},
    "insert data at proper node: same number at left node",
);

is-deeply(
    create-binary-tree( ["4", "5"] ),
    {:data("4"), :left(Any), :right({:data("5"), :left(Any), :right(Any)})},
    "insert data at proper node: greater number at right node",
);

is-deeply(
    create-binary-tree( ["4", "2", "6", "1", "3", "5", "7"] ),
    {:data("4"), :left({:data("2"), :left({:data("1"), :left(Any), :right(Any)}), :right({:data("3"), :left(Any), :right(Any)})}), :right({:data("6"), :left({:data("5"), :left(Any), :right(Any)}), :right({:data("7"), :left(Any), :right(Any)})})},
    "can create complex tree",
);

is-deeply(
    sort-binary-tree(
        create-binary-tree( ["2"] )
    ),
    ["2"],
    "can sort data: can sort single number",
);

is-deeply(
    sort-binary-tree(
        create-binary-tree( ["2", "1"] )
    ),
    ["1", "2"],
    "can sort data: can sort if second number is smaller than first",
);

is-deeply(
    sort-binary-tree(
        create-binary-tree( ["2", "2"] )
    ),
    ["2", "2"],
    "can sort data: can sort if second number is same as first",
);

is-deeply(
    sort-binary-tree(
        create-binary-tree( ["2", "3"] )
    ),
    ["2", "3"],
    "can sort data: can sort if second number is greater than first",
);

is-deeply(
    sort-binary-tree(
        create-binary-tree( ["2", "1", "3", "6", "7", "5"] )
    ),
    ["1", "2", "3", "5", "6", "7"],
    "can sort data: can sort complex tree",
);

done-testing;
