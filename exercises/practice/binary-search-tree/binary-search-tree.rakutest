#!/usr/bin/env raku
use Test;
use lib $?FILE.IO.dirname;
use BinarySearchTree;

my BinarySearchTree $bst;

for ["2"] -> $data {
    once {
        $bst.=new.root.=new(:$data);
        next;
    }
    $bst.add($data);
}
cmp-ok(
    $bst.sort,
    &infix:<~~>,
    ["2"],
    "can sort data: can sort single number",
);

for ["2", "1"] -> $data {
    once {
        $bst.=new.root.=new(:$data);
        next;
    }
    $bst.add($data);
}
cmp-ok(
    $bst.sort,
    &infix:<~~>,
    ["1", "2"],
    "can sort data: can sort if second number is smaller than first",
);

for ["2", "2"] -> $data {
    once {
        $bst.=new.root.=new(:$data);
        next;
    }
    $bst.add($data);
}
cmp-ok(
    $bst.sort,
    &infix:<~~>,
    ["2", "2"],
    "can sort data: can sort if second number is same as first",
);

for ["2", "3"] -> $data {
    once {
        $bst.=new.root.=new(:$data);
        next;
    }
    $bst.add($data);
}
cmp-ok(
    $bst.sort,
    &infix:<~~>,
    ["2", "3"],
    "can sort data: can sort if second number is greater than first",
);

for ["2", "1", "3", "6", "7", "5"] -> $data {
    once {
        $bst.=new.root.=new(:$data);
        next;
    }
    $bst.add($data);
}
cmp-ok(
    $bst.sort,
    &infix:<~~>,
    ["1", "2", "3", "5", "6", "7"],
    "can sort data: can sort complex tree",
);

done-testing;
