properties:
  data:
    test: |-
      sprintf(q:to/END/, %case<input><treeData><>.raku, %case<expected>.raku.subst(/\$/, '', :g), %case<description>.raku);
      is-deeply(
          create-binary-tree( %s ),
          %s,
          %s,
      );
      END
  sortedData:
    test: |-
      sprintf(q:to/END/, (%case<input><treeData><>, %case<expected><>, %case<description>).map(*.raku));
      is-deeply(
          sort-binary-tree(
              create-binary-tree( %s )
          ),
          %s,
          %s,
      );
      END


unit: module

example: |-
  sub create-binary-tree (@data) is export {
      return {};
  }

  sub sort-binary-tree (%tree) is export {
      return [];
  }

stub: |-
  sub create-binary-tree (@data) is export {
      return {};
  }

  sub sort-binary-tree (%tree) is export {
      return [];
  }
