tests: |
  my BinarySearchTree $bst;
properties:
  sortedData:
    test: |-
      sprintf(q:to/END/, (%case<input><treeData><>, %case<expected><>, %case<description>).map(*.raku));
      $bst.=new;
      for %s -> $data {
          $bst.add($data);
      }
      cmp-ok(
          $bst.sort,
          &infix:<~~>,
          %s,
          %s,
      );
      END

unit: class

example: |-
  class Node {
      has $.data;
      has Node ($.left, $.right) is rw;
  }

  has Node $.root;

  method add ($data) {
      if !$!root {
          $!root.=new(:$data);
      }
      else {
          $!root.&(sub ($node) {
              if $data > $node.data {
                  with $node.right {
                      .&?ROUTINE;
                  }
                  else {
                      $node.right.=new(:$data);
                  }
              }
              orwith $node.left {
                  .&?ROUTINE;
              }
              else {
                  $node.left.=new(:$data);
              }
          });
      }

      return self;
  }

  method sort {
      return [];
  }

stub: |-
  class Node {
      has $.data;
      has Node ($.left, $.right) is rw;
  }

  has Node $.root;

  method add ($data) {
      if !$!root {
          $!root.=new(:$data);
      }
      else {
      }

      return self;
  }

  method sort {
      return [];
  }
