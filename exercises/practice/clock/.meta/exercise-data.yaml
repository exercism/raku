methods: time add subtract
properties:
  create:
    test: |-
      sprintf(q:to/END/, (|(%case<input><hour minute>:p), |%case<expected description>).map(*.raku));
      is(
          Clock.new( %s, %s ).time,
          %s,
          %s,
      );
      END
  add:
    test: |-
      sprintf(q:to/END/, (|(%case<input><hour minute>:p), :minutes(%case<input><value>), |%case<expected description>).map(*.raku));
      is(
          Clock.new( %s, %s ).add( %s ).time,
          %s,
          %s,
      );
      END
  subtract:
    test: |-
      sprintf(q:to/END/, (|(%case<input><hour minute>:p), :minutes(%case<input><value>), |%case<expected description>).map(*.raku));
      is(
          Clock.new( %s, %s ).subtract( %s ).time,
          %s,
          %s,
      );
      END
  equal:
    test: |-
      if %case<expected> {
          sprintf(q:to/END/, (|%case<input><clock1 clock2>.map({|(.<hour minute>:p)}), %case<description>).map(*.raku));
          is-deeply(
              Clock.new( %s, %s ),
              Clock.new( %s, %s ),
              %s,
          );
          END
      }
      else {
          sprintf(q:to/END/, (|%case<input><clock1 clock2>.map({|(.<hour minute>:p)}), %case<description>).map(*.raku));
          cmp-ok(
              Clock.new( %s, %s ),
              &[!eqv],
              Clock.new( %s, %s ),
              %s,
          );
          END
      }

catch_stub: true

unit: class
example: |-
  has Int:D $.hour   = 0;
  has Int:D $.minute = 0;

  method time {
      sprintf '%02d:%02d', self.hour, self.minute;
  }

  method add (Int:D :$minutes) {
      $!minute += $minutes;
      self.TWEAK;
      return self;
  }

  method subtract (Int:D :$minutes) {
      self.add(minutes => -$minutes);
  }

  submethod TWEAK {
      $!hour = ($!hour + $!minute div 60) % 24;
      $!minute %= 60;
  }
stub: |-
  has $.hour;
  has $.minute;

  method time {!!!}

  method add (:$minutes) {!!!}

  method subtract (:$minutes) {!!!}

  submethod TWEAK {
      # Can be used to modify attributes after object construction
  }
