#!/usr/bin/env raku
use Test;
use lib $?FILE.IO.dirname;
use Clock;

for <time add subtract> -> $method {
  Clock.^can($method) or bail-out "Cannot run expected method `$method`.";
}

cmp-ok(
    Clock.new( :hour(8), :minute(0) ).time,
    "eq",
    "08:00",
    "Create a new clock with an initial time: on the hour",
);

cmp-ok(
    Clock.new( :hour(11), :minute(9) ).time,
    "eq",
    "11:09",
    "Create a new clock with an initial time: past the hour",
);

cmp-ok(
    Clock.new( :hour(24), :minute(0) ).time,
    "eq",
    "00:00",
    "Create a new clock with an initial time: midnight is zero hours",
);

cmp-ok(
    Clock.new( :hour(25), :minute(0) ).time,
    "eq",
    "01:00",
    "Create a new clock with an initial time: hour rolls over",
);

cmp-ok(
    Clock.new( :hour(100), :minute(0) ).time,
    "eq",
    "04:00",
    "Create a new clock with an initial time: hour rolls over continuously",
);

cmp-ok(
    Clock.new( :hour(1), :minute(60) ).time,
    "eq",
    "02:00",
    "Create a new clock with an initial time: sixty minutes is next hour",
);

cmp-ok(
    Clock.new( :hour(0), :minute(160) ).time,
    "eq",
    "02:40",
    "Create a new clock with an initial time: minutes roll over",
);

cmp-ok(
    Clock.new( :hour(0), :minute(1723) ).time,
    "eq",
    "04:43",
    "Create a new clock with an initial time: minutes roll over continuously",
);

cmp-ok(
    Clock.new( :hour(25), :minute(160) ).time,
    "eq",
    "03:40",
    "Create a new clock with an initial time: hour and minutes roll over",
);

cmp-ok(
    Clock.new( :hour(201), :minute(3001) ).time,
    "eq",
    "11:01",
    "Create a new clock with an initial time: hour and minutes roll over continuously",
);

cmp-ok(
    Clock.new( :hour(72), :minute(8640) ).time,
    "eq",
    "00:00",
    "Create a new clock with an initial time: hour and minutes roll over to exactly midnight",
);

cmp-ok(
    Clock.new( :hour(-1), :minute(15) ).time,
    "eq",
    "23:15",
    "Create a new clock with an initial time: negative hour",
);

cmp-ok(
    Clock.new( :hour(-25), :minute(0) ).time,
    "eq",
    "23:00",
    "Create a new clock with an initial time: negative hour rolls over",
);

cmp-ok(
    Clock.new( :hour(-91), :minute(0) ).time,
    "eq",
    "05:00",
    "Create a new clock with an initial time: negative hour rolls over continuously",
);

cmp-ok(
    Clock.new( :hour(1), :minute(-40) ).time,
    "eq",
    "00:20",
    "Create a new clock with an initial time: negative minutes",
);

cmp-ok(
    Clock.new( :hour(1), :minute(-160) ).time,
    "eq",
    "22:20",
    "Create a new clock with an initial time: negative minutes roll over",
);

cmp-ok(
    Clock.new( :hour(1), :minute(-4820) ).time,
    "eq",
    "16:40",
    "Create a new clock with an initial time: negative minutes roll over continuously",
);

cmp-ok(
    Clock.new( :hour(2), :minute(-60) ).time,
    "eq",
    "01:00",
    "Create a new clock with an initial time: negative sixty minutes is previous hour",
);

cmp-ok(
    Clock.new( :hour(-25), :minute(-160) ).time,
    "eq",
    "20:20",
    "Create a new clock with an initial time: negative hour and minutes both roll over",
);

cmp-ok(
    Clock.new( :hour(-121), :minute(-5810) ).time,
    "eq",
    "22:10",
    "Create a new clock with an initial time: negative hour and minutes both roll over continuously",
);

cmp-ok(
    Clock.new( :hour(10), :minute(0) ).add( :minutes(3) ).time,
    "eq",
    "10:03",
    "Add minutes: add minutes",
);

cmp-ok(
    Clock.new( :hour(6), :minute(41) ).add( :minutes(0) ).time,
    "eq",
    "06:41",
    "Add minutes: add no minutes",
);

cmp-ok(
    Clock.new( :hour(0), :minute(45) ).add( :minutes(40) ).time,
    "eq",
    "01:25",
    "Add minutes: add to next hour",
);

cmp-ok(
    Clock.new( :hour(10), :minute(0) ).add( :minutes(61) ).time,
    "eq",
    "11:01",
    "Add minutes: add more than one hour",
);

cmp-ok(
    Clock.new( :hour(0), :minute(45) ).add( :minutes(160) ).time,
    "eq",
    "03:25",
    "Add minutes: add more than two hours with carry",
);

cmp-ok(
    Clock.new( :hour(23), :minute(59) ).add( :minutes(2) ).time,
    "eq",
    "00:01",
    "Add minutes: add across midnight",
);

cmp-ok(
    Clock.new( :hour(5), :minute(32) ).add( :minutes(1500) ).time,
    "eq",
    "06:32",
    "Add minutes: add more than one day (1500 min = 25 hrs)",
);

cmp-ok(
    Clock.new( :hour(1), :minute(1) ).add( :minutes(3500) ).time,
    "eq",
    "11:21",
    "Add minutes: add more than two days",
);

cmp-ok(
    Clock.new( :hour(10), :minute(3) ).subtract( :minutes(3) ).time,
    "eq",
    "10:00",
    "Subtract minutes: subtract minutes",
);

cmp-ok(
    Clock.new( :hour(10), :minute(3) ).subtract( :minutes(30) ).time,
    "eq",
    "09:33",
    "Subtract minutes: subtract to previous hour",
);

cmp-ok(
    Clock.new( :hour(10), :minute(3) ).subtract( :minutes(70) ).time,
    "eq",
    "08:53",
    "Subtract minutes: subtract more than an hour",
);

cmp-ok(
    Clock.new( :hour(0), :minute(3) ).subtract( :minutes(4) ).time,
    "eq",
    "23:59",
    "Subtract minutes: subtract across midnight",
);

cmp-ok(
    Clock.new( :hour(0), :minute(0) ).subtract( :minutes(160) ).time,
    "eq",
    "21:20",
    "Subtract minutes: subtract more than two hours",
);

cmp-ok(
    Clock.new( :hour(6), :minute(15) ).subtract( :minutes(160) ).time,
    "eq",
    "03:35",
    "Subtract minutes: subtract more than two hours with borrow",
);

cmp-ok(
    Clock.new( :hour(5), :minute(32) ).subtract( :minutes(1500) ).time,
    "eq",
    "04:32",
    "Subtract minutes: subtract more than one day (1500 min = 25 hrs)",
);

cmp-ok(
    Clock.new( :hour(2), :minute(20) ).subtract( :minutes(3000) ).time,
    "eq",
    "00:20",
    "Subtract minutes: subtract more than two days",
);

cmp-ok(
    Clock.new( :hour(15), :minute(37) ),
    "eqv",
    Clock.new( :hour(15), :minute(37) ),
    "Compare two clocks for equality: clocks with same time",
);

cmp-ok(
    Clock.new( :hour(15), :minute(36) ),
    &[!eqv],
    Clock.new( :hour(15), :minute(37) ),
    "Compare two clocks for equality: clocks a minute apart",
);

cmp-ok(
    Clock.new( :hour(14), :minute(37) ),
    &[!eqv],
    Clock.new( :hour(15), :minute(37) ),
    "Compare two clocks for equality: clocks an hour apart",
);

cmp-ok(
    Clock.new( :hour(10), :minute(37) ),
    "eqv",
    Clock.new( :hour(34), :minute(37) ),
    "Compare two clocks for equality: clocks with hour overflow",
);

cmp-ok(
    Clock.new( :hour(3), :minute(11) ),
    "eqv",
    Clock.new( :hour(99), :minute(11) ),
    "Compare two clocks for equality: clocks with hour overflow by several days",
);

cmp-ok(
    Clock.new( :hour(22), :minute(40) ),
    "eqv",
    Clock.new( :hour(-2), :minute(40) ),
    "Compare two clocks for equality: clocks with negative hour",
);

cmp-ok(
    Clock.new( :hour(17), :minute(3) ),
    "eqv",
    Clock.new( :hour(-31), :minute(3) ),
    "Compare two clocks for equality: clocks with negative hour that wraps",
);

cmp-ok(
    Clock.new( :hour(13), :minute(49) ),
    "eqv",
    Clock.new( :hour(-83), :minute(49) ),
    "Compare two clocks for equality: clocks with negative hour that wraps multiple times",
);

cmp-ok(
    Clock.new( :hour(0), :minute(1) ),
    "eqv",
    Clock.new( :hour(0), :minute(1441) ),
    "Compare two clocks for equality: clocks with minute overflow",
);

cmp-ok(
    Clock.new( :hour(2), :minute(2) ),
    "eqv",
    Clock.new( :hour(2), :minute(4322) ),
    "Compare two clocks for equality: clocks with minute overflow by several days",
);

cmp-ok(
    Clock.new( :hour(2), :minute(40) ),
    "eqv",
    Clock.new( :hour(3), :minute(-20) ),
    "Compare two clocks for equality: clocks with negative minute",
);

cmp-ok(
    Clock.new( :hour(4), :minute(10) ),
    "eqv",
    Clock.new( :hour(5), :minute(-1490) ),
    "Compare two clocks for equality: clocks with negative minute that wraps",
);

cmp-ok(
    Clock.new( :hour(6), :minute(15) ),
    "eqv",
    Clock.new( :hour(6), :minute(-4305) ),
    "Compare two clocks for equality: clocks with negative minute that wraps multiple times",
);

cmp-ok(
    Clock.new( :hour(7), :minute(32) ),
    "eqv",
    Clock.new( :hour(-12), :minute(-268) ),
    "Compare two clocks for equality: clocks with negative hours and minutes",
);

cmp-ok(
    Clock.new( :hour(18), :minute(7) ),
    "eqv",
    Clock.new( :hour(-54), :minute(-11513) ),
    "Compare two clocks for equality: clocks with negative hours and minutes that wrap",
);

cmp-ok(
    Clock.new( :hour(24), :minute(0) ),
    "eqv",
    Clock.new( :hour(0), :minute(0) ),
    "Compare two clocks for equality: full clock and zeroed clock",
);

done-testing;
