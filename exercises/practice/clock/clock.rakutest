#!/usr/bin/env raku
use Test;
use lib $?FILE.IO.dirname;
use Clock;

cmp-ok( # begin: a577bacc-106b-496e-9792-b3083ea8705e
    Clock.new( :hour(8), :minute(0) ).time,
    "eq",
    "08:00",
    "Create a new clock with an initial time: on the hour",
); # end: a577bacc-106b-496e-9792-b3083ea8705e

cmp-ok( # begin: b5d0c360-3b88-489b-8e84-68a1c7a4fa23
    Clock.new( :hour(11), :minute(9) ).time,
    "eq",
    "11:09",
    "Create a new clock with an initial time: past the hour",
); # end: b5d0c360-3b88-489b-8e84-68a1c7a4fa23

cmp-ok( # begin: 473223f4-65f3-46ff-a9f7-7663c7e59440
    Clock.new( :hour(24), :minute(0) ).time,
    "eq",
    "00:00",
    "Create a new clock with an initial time: midnight is zero hours",
); # end: 473223f4-65f3-46ff-a9f7-7663c7e59440

cmp-ok( # begin: ca95d24a-5924-447d-9a96-b91c8334725c
    Clock.new( :hour(25), :minute(0) ).time,
    "eq",
    "01:00",
    "Create a new clock with an initial time: hour rolls over",
); # end: ca95d24a-5924-447d-9a96-b91c8334725c

cmp-ok( # begin: f3826de0-0925-4d69-8ac8-89aea7e52b78
    Clock.new( :hour(100), :minute(0) ).time,
    "eq",
    "04:00",
    "Create a new clock with an initial time: hour rolls over continuously",
); # end: f3826de0-0925-4d69-8ac8-89aea7e52b78

cmp-ok( # begin: a02f7edf-dfd4-4b11-b21a-86de3cc6a95c
    Clock.new( :hour(1), :minute(60) ).time,
    "eq",
    "02:00",
    "Create a new clock with an initial time: sixty minutes is next hour",
); # end: a02f7edf-dfd4-4b11-b21a-86de3cc6a95c

cmp-ok( # begin: 8f520df6-b816-444d-b90f-8a477789beb5
    Clock.new( :hour(0), :minute(160) ).time,
    "eq",
    "02:40",
    "Create a new clock with an initial time: minutes roll over",
); # end: 8f520df6-b816-444d-b90f-8a477789beb5

cmp-ok( # begin: c75c091b-47ac-4655-8d40-643767fc4eed
    Clock.new( :hour(0), :minute(1723) ).time,
    "eq",
    "04:43",
    "Create a new clock with an initial time: minutes roll over continuously",
); # end: c75c091b-47ac-4655-8d40-643767fc4eed

cmp-ok( # begin: 06343ecb-cf39-419d-a3f5-dcbae0cc4c57
    Clock.new( :hour(25), :minute(160) ).time,
    "eq",
    "03:40",
    "Create a new clock with an initial time: hour and minutes roll over",
); # end: 06343ecb-cf39-419d-a3f5-dcbae0cc4c57

cmp-ok( # begin: be60810e-f5d9-4b58-9351-a9d1e90e660c
    Clock.new( :hour(201), :minute(3001) ).time,
    "eq",
    "11:01",
    "Create a new clock with an initial time: hour and minutes roll over continuously",
); # end: be60810e-f5d9-4b58-9351-a9d1e90e660c

cmp-ok( # begin: 1689107b-0b5c-4bea-aad3-65ec9859368a
    Clock.new( :hour(72), :minute(8640) ).time,
    "eq",
    "00:00",
    "Create a new clock with an initial time: hour and minutes roll over to exactly midnight",
); # end: 1689107b-0b5c-4bea-aad3-65ec9859368a

cmp-ok( # begin: d3088ee8-91b7-4446-9e9d-5e2ad6219d91
    Clock.new( :hour(-1), :minute(15) ).time,
    "eq",
    "23:15",
    "Create a new clock with an initial time: negative hour",
); # end: d3088ee8-91b7-4446-9e9d-5e2ad6219d91

cmp-ok( # begin: 77ef6921-f120-4d29-bade-80d54aa43b54
    Clock.new( :hour(-25), :minute(0) ).time,
    "eq",
    "23:00",
    "Create a new clock with an initial time: negative hour rolls over",
); # end: 77ef6921-f120-4d29-bade-80d54aa43b54

cmp-ok( # begin: 359294b5-972f-4546-bb9a-a85559065234
    Clock.new( :hour(-91), :minute(0) ).time,
    "eq",
    "05:00",
    "Create a new clock with an initial time: negative hour rolls over continuously",
); # end: 359294b5-972f-4546-bb9a-a85559065234

cmp-ok( # begin: 509db8b7-ac19-47cc-bd3a-a9d2f30b03c0
    Clock.new( :hour(1), :minute(-40) ).time,
    "eq",
    "00:20",
    "Create a new clock with an initial time: negative minutes",
); # end: 509db8b7-ac19-47cc-bd3a-a9d2f30b03c0

cmp-ok( # begin: 5d6bb225-130f-4084-84fd-9e0df8996f2a
    Clock.new( :hour(1), :minute(-160) ).time,
    "eq",
    "22:20",
    "Create a new clock with an initial time: negative minutes roll over",
); # end: 5d6bb225-130f-4084-84fd-9e0df8996f2a

cmp-ok( # begin: d483ceef-b520-4f0c-b94a-8d2d58cf0484
    Clock.new( :hour(1), :minute(-4820) ).time,
    "eq",
    "16:40",
    "Create a new clock with an initial time: negative minutes roll over continuously",
); # end: d483ceef-b520-4f0c-b94a-8d2d58cf0484

cmp-ok( # begin: 1cd19447-19c6-44bf-9d04-9f8305ccb9ea
    Clock.new( :hour(2), :minute(-60) ).time,
    "eq",
    "01:00",
    "Create a new clock with an initial time: negative sixty minutes is previous hour",
); # end: 1cd19447-19c6-44bf-9d04-9f8305ccb9ea

cmp-ok( # begin: 9d3053aa-4f47-4afc-bd45-d67a72cef4dc
    Clock.new( :hour(-25), :minute(-160) ).time,
    "eq",
    "20:20",
    "Create a new clock with an initial time: negative hour and minutes both roll over",
); # end: 9d3053aa-4f47-4afc-bd45-d67a72cef4dc

cmp-ok( # begin: 51d41fcf-491e-4ca0-9cae-2aa4f0163ad4
    Clock.new( :hour(-121), :minute(-5810) ).time,
    "eq",
    "22:10",
    "Create a new clock with an initial time: negative hour and minutes both roll over continuously",
); # end: 51d41fcf-491e-4ca0-9cae-2aa4f0163ad4

cmp-ok( # begin: d098e723-ad29-4ef9-997a-2693c4c9d89a
    Clock.new( :hour(10), :minute(0) ).add( :minutes(3) ).time,
    "eq",
    "10:03",
    "Add minutes: add minutes",
); # end: d098e723-ad29-4ef9-997a-2693c4c9d89a

cmp-ok( # begin: b6ec8f38-e53e-4b22-92a7-60dab1f485f4
    Clock.new( :hour(6), :minute(41) ).add( :minutes(0) ).time,
    "eq",
    "06:41",
    "Add minutes: add no minutes",
); # end: b6ec8f38-e53e-4b22-92a7-60dab1f485f4

cmp-ok( # begin: efd349dd-0785-453e-9ff8-d7452a8e7269
    Clock.new( :hour(0), :minute(45) ).add( :minutes(40) ).time,
    "eq",
    "01:25",
    "Add minutes: add to next hour",
); # end: efd349dd-0785-453e-9ff8-d7452a8e7269

cmp-ok( # begin: 749890f7-aba9-4702-acce-87becf4ef9fe
    Clock.new( :hour(10), :minute(0) ).add( :minutes(61) ).time,
    "eq",
    "11:01",
    "Add minutes: add more than one hour",
); # end: 749890f7-aba9-4702-acce-87becf4ef9fe

cmp-ok( # begin: da63e4c1-1584-46e3-8d18-c9dc802c1713
    Clock.new( :hour(0), :minute(45) ).add( :minutes(160) ).time,
    "eq",
    "03:25",
    "Add minutes: add more than two hours with carry",
); # end: da63e4c1-1584-46e3-8d18-c9dc802c1713

cmp-ok( # begin: be167a32-3d33-4cec-a8bc-accd47ddbb71
    Clock.new( :hour(23), :minute(59) ).add( :minutes(2) ).time,
    "eq",
    "00:01",
    "Add minutes: add across midnight",
); # end: be167a32-3d33-4cec-a8bc-accd47ddbb71

cmp-ok( # begin: 6672541e-cdae-46e4-8be7-a820cc3be2a8
    Clock.new( :hour(5), :minute(32) ).add( :minutes(1500) ).time,
    "eq",
    "06:32",
    "Add minutes: add more than one day (1500 min = 25 hrs)",
); # end: 6672541e-cdae-46e4-8be7-a820cc3be2a8

cmp-ok( # begin: 1918050d-c79b-4cb7-b707-b607e2745c7e
    Clock.new( :hour(1), :minute(1) ).add( :minutes(3500) ).time,
    "eq",
    "11:21",
    "Add minutes: add more than two days",
); # end: 1918050d-c79b-4cb7-b707-b607e2745c7e

cmp-ok( # begin: 37336cac-5ede-43a5-9026-d426cbe40354
    Clock.new( :hour(10), :minute(3) ).subtract( :minutes(3) ).time,
    "eq",
    "10:00",
    "Subtract minutes: subtract minutes",
); # end: 37336cac-5ede-43a5-9026-d426cbe40354

cmp-ok( # begin: 0aafa4d0-3b5f-4b12-b3af-e3a9e09c047b
    Clock.new( :hour(10), :minute(3) ).subtract( :minutes(30) ).time,
    "eq",
    "09:33",
    "Subtract minutes: subtract to previous hour",
); # end: 0aafa4d0-3b5f-4b12-b3af-e3a9e09c047b

cmp-ok( # begin: 9b4e809c-612f-4b15-aae0-1df0acb801b9
    Clock.new( :hour(10), :minute(3) ).subtract( :minutes(70) ).time,
    "eq",
    "08:53",
    "Subtract minutes: subtract more than an hour",
); # end: 9b4e809c-612f-4b15-aae0-1df0acb801b9

cmp-ok( # begin: 8b04bb6a-3d33-4e6c-8de9-f5de6d2c70d6
    Clock.new( :hour(0), :minute(3) ).subtract( :minutes(4) ).time,
    "eq",
    "23:59",
    "Subtract minutes: subtract across midnight",
); # end: 8b04bb6a-3d33-4e6c-8de9-f5de6d2c70d6

cmp-ok( # begin: 07c3bbf7-ce4d-4658-86e8-4a77b7a5ccd9
    Clock.new( :hour(0), :minute(0) ).subtract( :minutes(160) ).time,
    "eq",
    "21:20",
    "Subtract minutes: subtract more than two hours",
); # end: 07c3bbf7-ce4d-4658-86e8-4a77b7a5ccd9

cmp-ok( # begin: 90ac8a1b-761c-4342-9c9c-cdc3ed5db097
    Clock.new( :hour(6), :minute(15) ).subtract( :minutes(160) ).time,
    "eq",
    "03:35",
    "Subtract minutes: subtract more than two hours with borrow",
); # end: 90ac8a1b-761c-4342-9c9c-cdc3ed5db097

cmp-ok( # begin: 2149f985-7136-44ad-9b29-ec023a97a2b7
    Clock.new( :hour(5), :minute(32) ).subtract( :minutes(1500) ).time,
    "eq",
    "04:32",
    "Subtract minutes: subtract more than one day (1500 min = 25 hrs)",
); # end: 2149f985-7136-44ad-9b29-ec023a97a2b7

cmp-ok( # begin: ba11dbf0-ac27-4acb-ada9-3b853ec08c97
    Clock.new( :hour(2), :minute(20) ).subtract( :minutes(3000) ).time,
    "eq",
    "00:20",
    "Subtract minutes: subtract more than two days",
); # end: ba11dbf0-ac27-4acb-ada9-3b853ec08c97

cmp-ok( # begin: f2fdad51-499f-4c9b-a791-b28c9282e311
    Clock.new( :hour(15), :minute(37) ),
    "eqv",
    Clock.new( :hour(15), :minute(37) ),
    "Compare two clocks for equality: clocks with same time",
); # end: f2fdad51-499f-4c9b-a791-b28c9282e311

cmp-ok( # begin: 5d409d4b-f862-4960-901e-ec430160b768
    Clock.new( :hour(15), :minute(36) ),
    &[!eqv],
    Clock.new( :hour(15), :minute(37) ),
    "Compare two clocks for equality: clocks a minute apart",
); # end: 5d409d4b-f862-4960-901e-ec430160b768

cmp-ok( # begin: a6045fcf-2b52-4a47-8bb2-ef10a064cba5
    Clock.new( :hour(14), :minute(37) ),
    &[!eqv],
    Clock.new( :hour(15), :minute(37) ),
    "Compare two clocks for equality: clocks an hour apart",
); # end: a6045fcf-2b52-4a47-8bb2-ef10a064cba5

cmp-ok( # begin: 66b12758-0be5-448b-a13c-6a44bce83527
    Clock.new( :hour(10), :minute(37) ),
    "eqv",
    Clock.new( :hour(34), :minute(37) ),
    "Compare two clocks for equality: clocks with hour overflow",
); # end: 66b12758-0be5-448b-a13c-6a44bce83527

cmp-ok( # begin: 2b19960c-212e-4a71-9aac-c581592f8111
    Clock.new( :hour(3), :minute(11) ),
    "eqv",
    Clock.new( :hour(99), :minute(11) ),
    "Compare two clocks for equality: clocks with hour overflow by several days",
); # end: 2b19960c-212e-4a71-9aac-c581592f8111

cmp-ok( # begin: 6f8c6541-afac-4a92-b0c2-b10d4e50269f
    Clock.new( :hour(22), :minute(40) ),
    "eqv",
    Clock.new( :hour(-2), :minute(40) ),
    "Compare two clocks for equality: clocks with negative hour",
); # end: 6f8c6541-afac-4a92-b0c2-b10d4e50269f

cmp-ok( # begin: bb9d5a68-e324-4bf5-a75e-0e9b1f97a90d
    Clock.new( :hour(17), :minute(3) ),
    "eqv",
    Clock.new( :hour(-31), :minute(3) ),
    "Compare two clocks for equality: clocks with negative hour that wraps",
); # end: bb9d5a68-e324-4bf5-a75e-0e9b1f97a90d

cmp-ok( # begin: 56c0326d-565b-4d19-a26f-63b3205778b7
    Clock.new( :hour(13), :minute(49) ),
    "eqv",
    Clock.new( :hour(-83), :minute(49) ),
    "Compare two clocks for equality: clocks with negative hour that wraps multiple times",
); # end: 56c0326d-565b-4d19-a26f-63b3205778b7

cmp-ok( # begin: c90b9de8-ddff-4ffe-9858-da44a40fdbc2
    Clock.new( :hour(0), :minute(1) ),
    "eqv",
    Clock.new( :hour(0), :minute(1441) ),
    "Compare two clocks for equality: clocks with minute overflow",
); # end: c90b9de8-ddff-4ffe-9858-da44a40fdbc2

cmp-ok( # begin: 533a3dc5-59a7-491b-b728-a7a34fe325de
    Clock.new( :hour(2), :minute(2) ),
    "eqv",
    Clock.new( :hour(2), :minute(4322) ),
    "Compare two clocks for equality: clocks with minute overflow by several days",
); # end: 533a3dc5-59a7-491b-b728-a7a34fe325de

cmp-ok( # begin: fff49e15-f7b7-4692-a204-0f6052d62636
    Clock.new( :hour(2), :minute(40) ),
    "eqv",
    Clock.new( :hour(3), :minute(-20) ),
    "Compare two clocks for equality: clocks with negative minute",
); # end: fff49e15-f7b7-4692-a204-0f6052d62636

cmp-ok( # begin: 605c65bb-21bd-43eb-8f04-878edf508366
    Clock.new( :hour(4), :minute(10) ),
    "eqv",
    Clock.new( :hour(5), :minute(-1490) ),
    "Compare two clocks for equality: clocks with negative minute that wraps",
); # end: 605c65bb-21bd-43eb-8f04-878edf508366

cmp-ok( # begin: b87e64ed-212a-4335-91fd-56da8421d077
    Clock.new( :hour(6), :minute(15) ),
    "eqv",
    Clock.new( :hour(6), :minute(-4305) ),
    "Compare two clocks for equality: clocks with negative minute that wraps multiple times",
); # end: b87e64ed-212a-4335-91fd-56da8421d077

cmp-ok( # begin: 822fbf26-1f3b-4b13-b9bf-c914816b53dd
    Clock.new( :hour(7), :minute(32) ),
    "eqv",
    Clock.new( :hour(-12), :minute(-268) ),
    "Compare two clocks for equality: clocks with negative hours and minutes",
); # end: 822fbf26-1f3b-4b13-b9bf-c914816b53dd

cmp-ok( # begin: e787bccd-cf58-4a1d-841c-ff80eaaccfaa
    Clock.new( :hour(18), :minute(7) ),
    "eqv",
    Clock.new( :hour(-54), :minute(-11513) ),
    "Compare two clocks for equality: clocks with negative hours and minutes that wrap",
); # end: e787bccd-cf58-4a1d-841c-ff80eaaccfaa

cmp-ok( # begin: 96969ca8-875a-48a1-86ae-257a528c44f5
    Clock.new( :hour(24), :minute(0) ),
    "eqv",
    Clock.new( :hour(0), :minute(0) ),
    "Compare two clocks for equality: full clock and zeroed clock",
); # end: 96969ca8-875a-48a1-86ae-257a528c44f5

done-testing;
