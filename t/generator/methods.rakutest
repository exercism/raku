use Test;
use lib ( my $base-dir = $?FILE.IO.resolve.parent(3) ).add('lib');
use Exercism::Generator;

subtest '0 case UUIDs' => {
  plan 4;

  given Exercism::Generator.new(
    :exercise<hello-world>,
    :case-uuids(),
  ) {
    is .package, 'HelloWorld', 'Default package name is UpperCamelCase';
    cmp-ok .case-uuids, &infix:<≡>, ∅, 'Case UUIDs is empty set';
    cmp-ok .cases.elems, &infix:<==>, 0, 'No cases';
    is .json-tests, '', 'Empty JSON';
  }
}

subtest '1 case UUID' => {
  plan 5;

  given Exercism::Generator.new(
    :exercise<hello-world>,
    :case-uuids(<af9ffe10-dc13-42d8-a742-e7bdafac449d>),
    :data(:package<TEST>, properties => { hello => { test => '%case<expected>' } }),
  ) {
    is .package, 'TEST', 'Custom package name as specified';

    cmp-ok .case-uuids, &infix:<≡>, <af9ffe10-dc13-42d8-a742-e7bdafac449d>;

    if %*ENV<HOME>.IO.add('.cache/exercism/configlet/problem-specifications') ~~ :d {
      is-deeply .cases.Array, [%(
        :description('Say Hi!'),
        :property<hello>,
        :input(Hash.new),
        :expected('Hello, World!'),
        :uuid<af9ffe10-dc13-42d8-a742-e7bdafac449d>,
      ).item], 'Case taken from UUID';

      is-deeply .property-tests.Array, ["Hello, World! # case: af9ffe10-dc13-42d8-a742-e7bdafac449d\n"];

      is .json-tests, q:to/JSON/.trim, 'Cases converted to JSON array';
        [
          {
            "description": "Say Hi!",
            "expected": "Hello, World!",
            "input": {
            },
            "property": "hello",
            "uuid": "af9ffe10-dc13-42d8-a742-e7bdafac449d"
          }
        ]
        JSON
    }
    else {
      skip 'problem-specifications required', 2;
    }
  }
}

done-testing;
