#!/usr/bin/env raku{{=#`{{ }}=}}#`{{! Mustache tags double up as Raku embedded comments}}
use Test;#`{{#modules}}
use #`{{&use}};#`{{/modules}}
use lib $?FILE.IO.dirname;#`{{#lib_comment}} #`[#`{{&lib_comment}}]#`{{/lib_comment}}
use #`{{&package}};#`{{#plan}}
plan #`{{&plan}};#`{{#plan_comment}} #`[#`{{&plan_comment}}]#`{{/plan_comment}}#`{{/plan}}#`{{#methods}}

#`{{#methods_comment}}#`[#`{{&methods_comment}}]
#`{{/methods_comment}}for <#`{{&methods}}> -> $method {
  #`{{&package}}.^can($method) or bail-out "Cannot run expected method `$method`.";
}#`{{/methods}}#`{{#tests}}

#`{{&tests}}#`{{/tests}}#`{{^plan}}

done-testing;#`{{/plan}}#`{{#wrap}}

# Exercism Test Runner Data
INIT {
    my Str:D $call is default('');

    for (#`{{#capture}}#`{{&function}},#`{{/capture}}) -> &f {
        &f.wrap(sub (|c) {
            $call = &f.name ~ |c.raku.substr(1);
            return callsame;
        });
    }

    &cmp-ok.wrap(sub ($, |c) {
        my $pass = callsame;
        diag '    code: cmp-ok(' ~ $call ~ ', ' ~ |c.raku.substr(2);
        diag 'at ' ~ callframe(1).file ~ ' line ' ~ callframe(1).line if !$pass;
        $call = Nil;
        return $pass;
    });
}#`{{/wrap}}#`{{#catch_stub}}

CATCH {
  when X::StubCode {
    flunk 'Caught stub';
    note "{.message} (does the sub/method contain '!!!'?)\n"
      ~ .backtrace.concise;
  }
}#`{{/catch_stub}}
